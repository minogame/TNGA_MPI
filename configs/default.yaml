experiment:
    evoluation_goal: a.npy
    max_generation: 30
    random_init: True

tensor_network:
    initializer: tf.compat.v1.random_normal_initializer
    initializer_params:
        mean: 0.0
        stddev: 1.0

optimization:
    evaluate_repeat: 2
    max_iterations: 50000
    optimizer: tf.compat.v1.train.AdamOptimizer
    optimizer_params:
        learning_rate: 0.001

agent_behavier:
    n_iter: 10
    estimation_iter: 100
    timeout: 1800
    allow_waiting_after_timeout_rate: 0.5

generation_property:
    n_individuals_span: 200
    n_individuals_survive: 100 
    allow_fewer_repeat_after_timeout: True
    fitness_func: "lambda s,l: s + l * 50"


    (# GENERATION PROPERTIES
                        =30, generation=Generation, =True,
                        # ISLAND PROPERTIES
                        N_islands=1, population=[int(sys.argv[2])], 
                        # INVIDUAL PROPERTIES
                        size=4, rank=2, out=2, init_sparsity=-0.00001,
                        # EVALUATION PROPERTIES
                        evaluate_repeat=2, max_iterations=10000,
                        
                        #
                        # EVOLUTION PROPERTIES
                        elimiation_threshold=[int(sys.argv[3])], immigration_prob=0, immigration_number=5,
                        crossover_alpha=1, mutation_prob=0.05,
                        # FOR COMPUTATION
                        callbacks=[score_summary])
